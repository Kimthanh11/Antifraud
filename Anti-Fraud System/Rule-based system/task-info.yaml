type: edu
files:
- name: src/antifraud/AntiFraudApplication.java
  visible: true
  text: |-
    package antifraud;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class AntiFraudApplication {
        public static void main(String[] args) {
            SpringApplication.run(AntiFraudApplication.class, args);
        }
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    server.error.include-message=always
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
    spring.jackson.serialization.INDENT_OUTPUT=true
  learner_created: false
- name: build.gradle
  visible: true
  text: |
    buildscript {
        apply plugin: 'hyperskill'

        repositories {
            mavenCentral()
        }

        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }

    test {
        jvmArgs '--add-opens', 'java.base/java.lang=ALL-UNNAMED'
    }
  learner_created: false
- name: test/AntiFraudTest.java
  visible: false
  text: |-
    import antifraud.AntiFraudApplication;
    import com.google.gson.JsonArray;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.UnexpectedError;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.request.HttpRequest;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.ArrayList;
    import java.util.List;

    import static org.hyperskill.hstest.common.JsonUtils.getJson;
    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    class TestHint {
        private final String apiPath;
        private final String requestBody;
        private final String message;

        public TestHint(String apiPath, String requestBody, String message) {
            this.apiPath = apiPath;
            this.requestBody = requestBody;
            this.message = message;
        }

        @Override
        public String toString() {
            return "Test case\n" +
                    "Testing api: '" + apiPath + '\'' + "\n" +
                    (requestBody.length() > 0 ? "request: '" + requestBody + '\'' + "\n" : "") +
                    "Expectations: '" + message + "'" + "\n" +
                    "-----";
        }
    }

    public class AntiFraudTest extends SpringTest {

        private final String transactionApi = "/api/antifraud/transaction";
        private final String userApi = "/api/auth/user";
        private final String userListApi = "/api/auth/list";
        private final String lockApi = "/api/auth/access";
        private final String roleApi = "/api/auth/role";
        private final String ipApi = "/api/antifraud/suspicious-ip";
        private final String cardApi = "/api/antifraud/stolencard";
        List<Integer> userIdList = new ArrayList<>();

        private final String administrator = "{\n" +
                "   \"name\": \"administrator\",\n" +
                "   \"username\": \"administrator\",\n" +
                "   \"password\": \"oMoa4VvqnLxW\"\n" +
                "}";

        private final String johndoe1 = "{\n" +
                "   \"name\": \"John Doe 1\",\n" +
                "   \"username\": \"johndoe1\",\n" +
                "   \"password\": \"oMoa3VvqnLxW\"\n" +
                "}";

        private final String johndoe2 = "{\n" +
                "   \"name\": \"John Doe 2\",\n" +
                "   \"username\": \"johndoe2\",\n" +
                "   \"password\": \"oMoa5VvqnLxW\"\n" +
                "}";

        private final String johndoe3 = "{\n" +
                "   \"name\": \"John Doe 3\",\n" +
                "   \"username\": \"johndoe3\",\n" +
                "   \"password\": \"oMoa6VvqnLxW\"\n" +
                "}";

        private final String wronguser1 = "{\n" +
                "   \"name\": \"John Doe 1\",\n" +
                "   \"password\": \"oa3VvqnLxW\"\n" +
                "}";

        private final String wronguser2 = "{\n" +
                "   \"name\": \"John Doe 2\",\n" +
                "   \"username\": \"johndoe1\"\n" +
                "}";

        private final String wronguserCred1 = "{\n" +
                "   \"name\": \"John Doe 1\",\n" +
                "   \"username\": \"johndoe1\",\n" +
                "   \"password\": \"oa3VvqnLxW\"\n" +
                "}";

        private final String wronguserCred2 = "{\n" +
                "   \"name\": \"John Do\",\n" +
                "   \"username\": \"johndo\",\n" +
                "   \"password\": \"oMoa3VvqnLxW\"\n" +
                "}";

        private final String listAnswer1 = "[ {\n" +
                "  \"id\" : 1,\n" +
                "  \"name\" : \"administrator\",\n" +
                "  \"username\" : \"administrator\",\n" +
                "  \"role\" : \"ADMINISTRATOR\"\n" +
                "}, {\n" +
                "  \"id\" : 2,\n" +
                "  \"name\" : \"John Doe 1\",\n" +
                "  \"username\" : \"johndoe1\",\n" +
                "  \"role\" : \"MERCHANT\"\n" +
                "}, {\n" +
                "  \"id\" : 4,\n" +
                "  \"name\" : \"John Doe 2\",\n" +
                "  \"username\" : \"johndoe2\",\n" +
                "  \"role\" : \"MERCHANT\"\n" +
                "} ]";

        private final String listAnswer2 = "[ {\n" +
                "  \"id\" : 1,\n" +
                "  \"name\" : \"administrator\",\n" +
                "  \"username\" : \"administrator\",\n" +
                "  \"role\" : \"ADMINISTRATOR\"\n" +
                "}, {\n" +
                "  \"id\" : 4,\n" +
                "  \"name\" : \"John Doe 2\",\n" +
                "  \"username\" : \"johndoe2\",\n" +
                "  \"role\" : \"MERCHANT\"\n" +
                "} ]";

        private final String listAnswer3 = "[ {\n" +
                "  \"id\" : 1,\n" +
                "  \"name\" : \"administrator\",\n" +
                "  \"username\" : \"administrator\",\n" +
                "  \"role\" : \"ADMINISTRATOR\"\n" +
                "}, {\n" +
                "  \"id\" : 4,\n" +
                "  \"name\" : \"John Doe 2\",\n" +
                "  \"username\" : \"johndoe2\",\n" +
                "  \"role\" : \"SUPPORT\"\n" +
                "} ]";

        private final String tr1 = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:00:00\"\n" +
                "}";

        private final String tr2 = "{\n" +
                "  \"amount\": 199,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:01:00\"\n" +
                "}";

        private final String tr3 = "{\n" +
                "  \"amount\": 200,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:02:00\"\n" +
                "}";

        private final String tr4 = "{\n" +
                "  \"amount\": 201,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:03:00\"\n" +
                "}";

        private final String tr5 = "{\n" +
                "  \"amount\": 1499,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:04:00\"\n" +
                "}";

        private final String tr6 = "{\n" +
                "  \"amount\": 1500,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:05:00\"\n" +
                "}";

        private final String tr7 = "{\n" +
                "  \"amount\": 1501,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:06:00\"\n" +
                "}";

        private final String tr8 = "{\n" +
                "  \"amount\": 2000,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:07:00\"\n" +
                "}";

        private final String trW1 = "{\n" +
                "  \"amount\": -1,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:00:00\"\n" +
                "}";

        private final String trW2 = "{\n" +
                "  \"amount\": 0,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:00:00\"\n" +
                "}";

        private final String trW3 = "{\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:00:00\"\n" +
                "}";

        private final String trW4 = "{\n" +
                "  \"amount\": \" \",\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:00:00\"\n" +
                "}";

        private final String trW5 = "{\n" +
                "  \"amount\": \"\",\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:00:00\"\n" +
                "}";

        private final String trW6 = "{ }";

        private final String trP1 = "{\n" +
                "  \"amount\": 1000,\n" +
                "  \"ip\": \"192.168.1.67\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:00:00\"\n" +
                "}";

        private final String trP2 = "{\n" +
                "  \"amount\": 1000,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000003305160034\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:00:00\"\n" +
                "}";

        private final String trP3 = "{\n" +
                "  \"amount\": 1000,\n" +
                "  \"ip\": \"192.168.1.67\",\n" +
                "  \"number\": \"4000003305160034\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:00:00\"\n" +
                "}";

        private final String trP4 = "{\n" +
                "  \"amount\": 2000,\n" +
                "  \"ip\": \"192.168.1.67\",\n" +
                "  \"number\": \"4000003305160034\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:00:00\"\n" +
                "}";

        // correlation rules
        private final String corr1IP = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.2\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T17:10:00\"\n" +
                "}";

        private final String corr2IP = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.3\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T17:11:00\"\n" +
                "}";

        private final String corr22IP = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.3\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T17:12:00\"\n" +
                "}";

        private final String corr3IP = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.4\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T17:12:00\"\n" +
                "}";

        private final String corr4IP = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.5\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T17:13:00\"\n" +
                "}";

        private final String corr5IP = "{\n" +
                "  \"amount\": 2000,\n" +
                "  \"ip\": \"192.168.1.5\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T17:14:00\"\n" +
                "}";

        private final String corr1Reg = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.2\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-21T17:10:00\"\n" +
                "}";

        private final String corr2Reg = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.2\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"ECA\",\n" +
                "  \"date\": \"2022-01-21T17:11:00\"\n" +
                "}";

        private final String corr22Reg = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.2\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"ECA\",\n" +
                "  \"date\": \"2022-01-21T17:12:00\"\n" +
                "}";

        private final String corr3Reg = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.2\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"HIC\",\n" +
                "  \"date\": \"2022-01-21T17:13:00\"\n" +
                "}";

        private final String corr4Reg = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.2\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"SSA\",\n" +
                "  \"date\": \"2022-01-21T17:14:00\"\n" +
                "}";

        private final String corr5Reg = "{\n" +
                "  \"amount\": 2000,\n" +
                "  \"ip\": \"192.168.1.2\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"SA\",\n" +
                "  \"date\": \"2022-01-21T17:15:00\"\n" +
                "}";





        private final String ipAnswer = "[ {\n" +
                "  \"id\" : 1,\n" +
                "  \"ip\" : \"192.168.1.66\"\n" +
                "}, {\n" +
                "  \"id\" : 2,\n" +
                "  \"ip\" : \"192.168.1.67\"\n" +
                "} ]";

        private final String ipAnswer2 = "[ {\n" +
                "  \"id\" : 2,\n" +
                "  \"ip\" : \"192.168.1.67\"\n" +
                "} ]";

        private final String ipAnswerEmpty = "[]";

        private final String cardAnswerEmpty = "[]";

        private final String cardAnswer = "[ {\n" +
                "  \"id\" : 1,\n" +
                "  \"number\" : \"4000003305061034\"\n" +
                "}, {\n" +
                "  \"id\" : 2,\n" +
                "  \"number\" : \"4000003305160034\"\n" +
                "} ]";

        private final String cardAnswer2 = "[ {\n" +
                "  \"id\" : 2,\n" +
                "  \"number\" : \"4000003305160034\"\n" +
                "} ]";




        public AntiFraudTest() {
            super(AntiFraudApplication.class, "../service_db.mv.db");
        }

        /**
         * Method for restarting application
         *
         */
        private CheckResult restartApplication() {
            try {
                reloadSpring();
            } catch (Exception ex) {
                throw new UnexpectedError(ex.getMessage());
            }
            return CheckResult.correct();
        }

        private HttpResponse checkResponseStatus(String user, String body,
                                                 int status, String api, String method) {
            HttpRequest request = null;
            switch (method) {
                case "GET":
                    request = get(api);
                    break;
                case "POST":
                    request = post(api, body);
                    break;
                case "PUT":
                    request = put(api, body);
                    break;
                case "DELETE":
                    request = delete(api);
                    break;
            }

            if (user != null) {
                JsonObject userJson = getJson(user).getAsJsonObject();
                String password = userJson.get("password").getAsString();
                String login = userJson.get("username").getAsString().toLowerCase();
                request = request.basicAuth(login, password);
            }
            HttpResponse response = request.send();

            if (response.getStatusCode() != status) {
                throw new WrongAnswer(method + " " + api  + " should respond with "
                        + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                        + "Response body:\n" + response.getContent() + "\n");
            }
            return response;
        }

        public boolean isNumeric(String strNum) {
            if (strNum == null) {
                return false;
            }
            try {
                long l = Long.parseLong(strNum);
            } catch (NumberFormatException nfe) {
                return false;
            }
            return true;
        }

        CheckResult testAddUser(String body, int status, String role, TestHint hint) {

            System.out.println(hint.toString());

            HttpResponse response = checkResponseStatus(null, body, status, userApi, "POST");


            if (response.getStatusCode() == 201) {

                JsonObject rightResponse = getJson(body).getAsJsonObject();
                rightResponse.remove("password");

                // Check is it JSON in response or something else
                if (!response.getJson().isJsonObject()) {
                    return CheckResult.wrong("Wrong object in response, expected JSON but was \n" +
                            response.getContent().getClass());

                }

                JsonObject jsonResponse = response.getJson().getAsJsonObject();

                // Check if password is presence in response
                if (jsonResponse.get("password") != null) {
                    return CheckResult.wrong("You must remove password from response\n" +
                            jsonResponse);
                }

                if (jsonResponse.get("id") == null) {
                    return CheckResult.wrong("Response must contain user ID\n" +
                            "Received response:\n" +
                            jsonResponse);
                }

                if (jsonResponse.get("id").isJsonNull()) {
                    return CheckResult.wrong("Response must contain user ID\n" +
                            "Received response:\n" +
                            jsonResponse);
                }

                if (userIdList.contains(jsonResponse.get("id").getAsInt())) {
                    return CheckResult.wrong("User ID must be unique!\n" +
                            "Received response:\n" +
                            jsonResponse);
                }

                rightResponse.addProperty("id", jsonResponse.get("id").toString());
                // Check JSON in response
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("id", isInteger())
                                .value("name", rightResponse.get("name").getAsString())
                                .value("role", role)
                                .value("username", isString(s -> s.equalsIgnoreCase(rightResponse.get("username").getAsString())))
                );
                userIdList.add(jsonResponse.get("id").getAsInt());
            }
            return CheckResult.correct();
        }

        CheckResult testDeleteUser(String body, int status, String user, TestHint hint) {

            System.out.println(hint.toString());

            HttpResponse response = checkResponseStatus(body, "", status, userApi + "/" + user, "DELETE");

            if (response.getStatusCode() == 200) {

                // Check is it JSON in response or something else
                if (!response.getJson().isJsonObject()) {
                    return CheckResult.wrong("Wrong object in response, expected JSON but was \n" +
                            response.getContent().getClass());

                }

                JsonObject jsonResponse = response.getJson().getAsJsonObject();

                // Check JSON in response
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("status", "Deleted successfully!")
                                .value("username", isString(s -> s.equalsIgnoreCase(user)))
                );
            }
            return CheckResult.correct();
        }

        private CheckResult testListUser(String user, int status, String answer,
                                         int position, TestHint hint) {

            System.out.println(hint.toString());

            HttpResponse response = checkResponseStatus(user, "", status, userListApi, "GET");

            if (response.getStatusCode() == 200) {
                // Check is it array of JSON in response or something else
                if (!response.getJson().isJsonArray()) {
                    return CheckResult.wrong("Wrong object in response, expected array of JSON but was \n" +
                            response.getContent().getClass());

                }

                JsonArray correctJson = getJson(answer).getAsJsonArray();
                JsonArray responseJson = getJson(response.getContent()).getAsJsonArray();
                if (responseJson.size() == 0) {
                    throw new WrongAnswer("Empty array in response!");
                }

                if (responseJson.size() != position + 1) {
                    throw new WrongAnswer("Incorrect number - " +  responseJson.size() +
                            " users in response, must be - " + (position + 1));
                }

                // Check JSON in response
                expect(responseJson.get(position).toString()).asJson().check(
                        isObject()
                                .value("id", isInteger())
                                .value("name", correctJson.get(position).getAsJsonObject().get("name").getAsString())
                                .value("role", correctJson.get(position).getAsJsonObject().get("role").getAsString())
                                .value("username",
                                        isString(s -> s.equalsIgnoreCase(correctJson.get(position).getAsJsonObject()
                                                .get("username").getAsString()))
                                ));

            }
            return CheckResult.correct();
        }

        private CheckResult testLock(String user, int status, String operation, String username, TestHint hint) {
            System.out.println(hint.toString());

            JsonObject jsonBody = new JsonObject();
            jsonBody.addProperty("username", username);
            jsonBody.addProperty("operation", operation);

            HttpResponse response = checkResponseStatus(user, jsonBody.toString(), status, lockApi, "PUT");
            if (response.getStatusCode() == 200) {
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("status", isString(s ->
                                        s.equalsIgnoreCase("User " + username + " " + operation + "ed!"))));
            }
            return CheckResult.correct();
        }

        private CheckResult testRole(String user, int status, String role, String username, TestHint hint) {
            System.out.println(hint.toString());

            JsonObject jsonBody = new JsonObject();
            jsonBody.addProperty("username", username);
            jsonBody.addProperty("role", role);

            HttpResponse response = checkResponseStatus(user, jsonBody.toString(), status, roleApi, "PUT");

            if (response.getStatusCode() == 200) {
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("id", isInteger())
                                .value("name", isString())
                                .value("role", role)
                                .value("username", isString(s -> s.equalsIgnoreCase(username))));
            }
            return CheckResult.correct();
        }

        private CheckResult testTransaction(String user, String api, String method, int status, String body,
                                            String answer, String answer2, TestHint hint) {

            System.out.println(hint.toString());

            HttpResponse response = checkResponseStatus(user, body, status, api, method);

            // Check JSON in response
            if (response.getStatusCode() == 200) {
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("result", answer)
                                .value("info", answer2));
            }
            return CheckResult.correct();
        }

        private CheckResult testAddIP(String user, int status, String ip, TestHint hint) {
            System.out.println(hint.toString());

            JsonObject jsonBody = new JsonObject();
            jsonBody.addProperty("ip", ip);

            HttpResponse response = checkResponseStatus(user, jsonBody.toString(), status, ipApi, "POST");
            if (response.getStatusCode() == 200) {
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("id", isInteger())
                                .value("ip", ip));
            }
            return CheckResult.correct();
        }

        private CheckResult testDeleteIP(String user, int status, String ip, TestHint hint) {
            System.out.println(hint.toString());

            HttpResponse response = checkResponseStatus(user, "", status, ipApi + "/" + ip, "DELETE");
            if (response.getStatusCode() == 200) {
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("status", "IP " + ip + " successfully removed!"));
            }
            return CheckResult.correct();
        }

        private CheckResult testAddCard(String user, int status, String number, TestHint hint) {
            System.out.println(hint.toString());

            JsonObject jsonBody = new JsonObject();
            jsonBody.addProperty("number", number);

            HttpResponse response = checkResponseStatus(user, jsonBody.toString(), status, cardApi, "POST");
            if (response.getStatusCode() == 200) {
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("id", isInteger())
                                .value("number", number));
            }
            return CheckResult.correct();
        }

        private CheckResult testDeleteCard(String user, int status, String number, TestHint hint) {
            System.out.println(hint.toString());

            HttpResponse response = checkResponseStatus(user, "", status, cardApi + "/" + number, "DELETE");
            if (response.getStatusCode() == 200) {
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("status", "Card " + number + " successfully removed!"));
            }
            return CheckResult.correct();
        }

        private CheckResult testGetIP(String user, int status, String answer, TestHint hint) {
            System.out.println(hint.toString());

            HttpResponse response = checkResponseStatus(user, "", status, ipApi, "GET");

            if (response.getStatusCode() == 200) {
                if (!response.getJson().isJsonArray()) {
                    return CheckResult.wrong("Wrong object in response, expected array of JSON but was \n" +
                            response.getContent().getClass());

                }

                JsonArray correctJson = getJson(answer).getAsJsonArray();
                JsonArray responseJson = getJson(response.getContent()).getAsJsonArray();

                if (responseJson.size() != correctJson.size()) {
                    throw new WrongAnswer("Incorrect number - " +  responseJson.size() +
                            " objects in response, must be - " + correctJson.size());
                }

                // Check JSON in response
                for (int i =0; i < correctJson.size(); i++) {
                    expect(responseJson.get(i).toString()).asJson().check(
                            isObject()
                                    .value("id", isInteger())
                                    .value("ip", correctJson.get(i).getAsJsonObject().get("ip").getAsString())
                    );
                }

            }
            return CheckResult.correct();
        }

        private CheckResult testGetCard(String user, int status, String answer, TestHint hint) {
            System.out.println(hint.toString());

            HttpResponse response = checkResponseStatus(user, "", status, cardApi, "GET");

            if (response.getStatusCode() == 200) {
                if (!response.getJson().isJsonArray()) {
                    return CheckResult.wrong("Wrong object in response, expected array of JSON but was \n" +
                            response.getContent().getClass());

                }

                JsonArray correctJson = getJson(answer).getAsJsonArray();
                JsonArray responseJson = getJson(response.getContent()).getAsJsonArray();

                if (responseJson.size() != correctJson.size()) {
                    throw new WrongAnswer("Incorrect number - " +  responseJson.size() +
                            " objects in response, must be - " + correctJson.size());
                }

                // Check JSON in response
                for (int i =0; i < correctJson.size(); i++) {
                    expect(responseJson.get(i).toString()).asJson().check(
                            isObject()
                                    .value("id", isInteger())
                                    .value("number", correctJson.get(i).getAsJsonObject().get("number").getAsString())
                    );
                }

            }
            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dt = new DynamicTesting[]{
                // Test POST request for signup api
                () -> testAddUser(wronguser1, 400, "MERCHANT",
                        new TestHint(userApi, wronguser1, "In case of wrong data in request, endpoint" +
                                " must respond with BAD REQUEST  status (400).")), // 1

                () -> testAddUser(wronguser2, 400, "MERCHANT",
                        new TestHint(userApi, wronguser2, "In case of wrong data in request, endpoint" +
                                " must respond with BAD REQUEST  status (400).")), // 2

                () -> testAddUser(administrator, 201, "ADMINISTRATOR",
                        new TestHint(userApi, johndoe1, "If user successfully added, endpoint" +
                                " must respond with HTTP CREATED status (201) ")), // 3

                () -> testListUser(administrator, 200,  listAnswer1, 0,
                        new TestHint(userListApi, "", "Endpoint must respond with HTTP OK status (200)" +
                                " and body with array of objects representing the users sorted by ID in ascending order.")), // 4


                () -> testAddUser(johndoe1, 201, "MERCHANT",
                        new TestHint(userApi, johndoe1, "If user successfully added, endpoint" +
                                " must respond with HTTP CREATED status (201) ")), // 5

                () -> testListUser(administrator, 200,  listAnswer1, 1,
                        new TestHint(userListApi, "", "Endpoint must respond with HTTP OK status (200)" +
                                " and body with array of objects representing the users sorted by ID in ascending order.")), // 6

                () -> testListUser(wronguserCred1, 401,  listAnswer1, 0,
                        new TestHint(userListApi, "", "A user with incorrect credentials is not allowed")), // 7

                () -> testListUser(wronguserCred2, 401,  listAnswer1, 0,
                        new TestHint(userListApi, "", "A user with incorrect credentials is not allowed")), // 8

                () -> testTransaction(johndoe1, transactionApi, "POST", 401,tr1,
                        "ALLOWED", "none",
                        new TestHint(transactionApi, "", "Merchant after registration" +
                                " must be LOCKED")), // 9

                () -> testLock(administrator, 200, "UNLOCK", "johndoe1",
                        new TestHint(lockApi, "", "A user johndoe1 must be UNLOCKED")), // 10

                () -> testTransaction(johndoe1, transactionApi, "POST", 200,tr1,
                        "ALLOWED", "none",
                        new TestHint(transactionApi, "", "A user johndoe1 must be UNLOCKED")), // 11

                () -> testTransaction(johndoe1, transactionApi, "POST", 200,tr1,
                        "ALLOWED", "none",
                        new TestHint(transactionApi, "amount = 1", "Result validating of Transaction" +
                                " must be 'ALLOWED'")), // 12

                // Testing persistence
                () -> restartApplication(), // 13

                () -> testListUser(administrator, 200,  listAnswer1, 1,
                        new TestHint(userListApi, "", "After restart user must exist")), // 14

                () -> testAddUser(johndoe1, 409, "MERCHANT",
                        new TestHint(userApi, johndoe1, "In case of an attempt to register an existing user," +
                                " endpoint must respond with HTTP CONFLICT status (409).")), // 15

                () -> testAddUser(johndoe2, 201, "MERCHANT",
                        new TestHint(userApi, johndoe2, "If user successfully added, endpoint" +
                                " must respond with HTTP CREATED status (201) ")), // 16

                () -> testListUser(administrator, 200,  listAnswer1, 2,
                        new TestHint(userListApi, "", "Endpoint must respond with HTTP OK status (200)" +
                                " and body with array of objects representing the users sorted by ID in ascending order.")), // 17

                () -> testTransaction(johndoe1, transactionApi, "POST", 200, tr2,
                        "ALLOWED", "none",
                        new TestHint(transactionApi, "amount = 199", "Result validating of Transaction" +
                                " must be 'ALLOWED'")), // 18

                () -> testTransaction(johndoe1, transactionApi, "POST", 200, tr3,
                        "ALLOWED", "none",
                        new TestHint(transactionApi, "amount = 200", "Result validating of Transaction" +
                                " must be 'ALLOWED'")), // 19

                () -> testTransaction(johndoe1, transactionApi, "POST", 200, tr4,
                        "MANUAL_PROCESSING", "amount",
                        new TestHint(transactionApi, "amount = 201", "Result validating of Transaction" +
                                " must be 'MANUAL_PROCESSING'")), // 20

                () -> testTransaction(johndoe1, transactionApi, "POST", 200, tr5,
                        "MANUAL_PROCESSING", "amount",
                        new TestHint(transactionApi, "amount = 1499", "Result validating of Transaction" +
                                " must be 'MANUAL_PROCESSING'")), // 21

                () -> testTransaction(johndoe1, transactionApi, "POST", 200, tr6,
                        "MANUAL_PROCESSING", "amount",
                        new TestHint(transactionApi, "amount = 1500", "Result validating of Transaction" +
                                " must be 'MANUAL_PROCESSING'")), // 22

                () -> testTransaction(johndoe1, transactionApi, "POST", 200, tr7,
                        "PROHIBITED", "amount",
                        new TestHint(transactionApi, "amount = 1501", "Result validating of Transaction" +
                                " must be 'PROHIBITED'")), // 23

                () -> testTransaction(johndoe1, transactionApi, "POST", 200, tr8,
                        "PROHIBITED", "amount",
                        new TestHint(transactionApi, "amount = 2000", "Result validating of Transaction" +
                                " must be 'PROHIBITED'")), // 24

                () -> testTransaction(johndoe1, transactionApi, "POST", 400, trW1,
                        "Wrong request!", "none",
                        new TestHint(transactionApi, "amount = -1", "Response status" +
                                " must be 'Bad request'")), // 25

                () -> testTransaction(johndoe1, transactionApi, "POST", 400, trW2,
                        "Wrong request!", "none",
                        new TestHint(transactionApi, "amount = 0", "Response status" +
                                " must be 'Bad request'")), // 26

                () -> testTransaction(johndoe1, transactionApi, "POST", 400,trW3,
                        "Wrong request!", "none",
                        new TestHint(transactionApi, "amount = null", "Response status" +
                                " must be 'Bad request'")), // 27

                () -> testTransaction(johndoe1, transactionApi, "POST", 400,trW4,
                        "Wrong request!", "none",
                        new TestHint(transactionApi, "amount = \"\"", "Response status" +
                                " must be 'Bad request'")), // 28

                () -> testTransaction(johndoe1, transactionApi, "POST", 400, trW5,
                        "Wrong request!",  "none",
                        new TestHint(transactionApi, "amount = \" \"", "Response status" +
                                " must be 'Bad request'")), // 29

                () -> testTransaction(johndoe1, transactionApi, "POST", 400, trW6,
                        "Wrong request!",   "none",
                        new TestHint(transactionApi, "empty body", "Response status" +
                                " must be 'Bad request'")), // 30

                () -> testDeleteUser(administrator,404,"somebody",
                        new TestHint(userApi, userApi + "/" + "somebody", "If a user is not found," +
                                " respond with HTTP Not Found status (404).")), // 31

                () -> testDeleteUser(administrator,200,"johndoe1",
                        new TestHint(userApi, userApi + "/" + "johndoe1", "The endpoint must delete" +
                                " the user and respond with HTTP OK status (200)")), // 32

                () -> testListUser(administrator, 200,  listAnswer2, 1,
                        new TestHint(userListApi, "", "User 'johndoe1' must be delete")), // 33

                () -> testRole(administrator,404,"MERCHANT", "johndoe22",
                        new TestHint(roleApi, "", "If a user is not found, endpoint" +
                                " must respond with the HTTP Not Found status (404).")), // 34

                () -> testRole(administrator,400,"USER", "johndoe2",
                        new TestHint(roleApi, "", "If a role is not found, endpoint" +
                                " must respond with the HTTP Bad Request status (400).")), // 35

                () -> testRole(administrator,400,"ADMINISTRATOR", "johndoe2",
                        new TestHint(roleApi, "", "If a role is ADMINISTRATOR, endpoint" +
                                " must respond with the HTTP Bad Request status (400).")), // 36

                () -> testRole(administrator,200,"SUPPORT", "johndoe2",
                        new TestHint(roleApi, "", "If a role successfully changed," +
                                " respond with the HTTP OK status (200)")), // 37

                () -> testRole(administrator,409,"SUPPORT", "johndoe2",
                        new TestHint(roleApi, "", "If a role already assigned to a user," +
                                " endpoint must respond with the HTTP Conflict status (409).")), // 38

                () -> testLock(administrator, 200, "UNLOCK", "johndoe2",
                        new TestHint(lockApi, "", "A user johndoe2 must be UNLOCKED")), // 39

                () -> testListUser(johndoe2, 200,  listAnswer3, 1,
                        new TestHint(userListApi, "", "Role for user 'johndoe2" +
                                "' must be changed to SUPPORT")), // 40

                () -> testTransaction(johndoe2, transactionApi, "POST", 403, tr1,
                        "ALLOWED",   "none",
                        new TestHint(transactionApi, "", "Role MERCHANT must be removed from" +
                                " user johndoe2!")), // 41

                // test Locking
                () -> testAddUser(johndoe3, 201, "MERCHANT",
                        new TestHint(userApi, johndoe3, "If user successfully added, endpoint" +
                                " must respond with HTTP CREATED status (201) ")), // 42

                () -> testTransaction(johndoe3, transactionApi, "POST", 401, tr1,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "MERCHANT user after registration" +
                                " must be LOCKED")), // 43

                () -> testLock(administrator, 200, "UNLOCK", "johndoe3",
                        new TestHint(lockApi, "", "A user johndoe3 must be UNLOCKED")), // 44

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, tr1,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "A user johndoe3 must be UNLOCKED")), // 45

                () -> testLock(administrator, 200, "LOCK", "johndoe3",
                        new TestHint(lockApi, "", "A user johndoe3 must be LOCKED")), // 46

                () -> testTransaction(johndoe3, transactionApi, "POST", 401, tr1,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "A user johndoe3 must be LOCKED")), // 47

                () -> testLock(administrator, 200, "UNLOCK", "johndoe3",
                        new TestHint(lockApi, "", "A user johndoe3 must be UNLOCKED")), // 48

                // test role model
                () -> testTransaction(administrator, transactionApi, "POST", 403, tr1,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "A user with role ADMINISTRATOR" +
                                " must not have access to " + transactionApi)), // 49

                () -> testTransaction(johndoe2, transactionApi, "POST", 403, tr1,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "A user with role SUPPORT" +
                                " must not have access to " + transactionApi)), // 50

                () -> testTransaction(null, transactionApi, "POST", 401, tr1,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "A user with role ANONYMOUS" +
                                " must not have access to " + transactionApi)), // 51

                () -> testDeleteUser(null,401,"johndoe1",
                        new TestHint(userApi, "", "A user with role ANONYMOUS" +
                                " must not have access to DELETE " + userApi)), // 52

                () -> testDeleteUser(johndoe2,403,"johndoe1",
                        new TestHint(userApi, "", "A user with role SUPPORT" +
                                " must not have access to DELETE " + userApi)), // 53

                () -> testDeleteUser(johndoe3,403,"johndoe1",
                        new TestHint(userApi, "", "A user with role MERCHANT" +
                                " must not have access to DELETE " + userApi)), // 54

                () -> testListUser(null, 401,  listAnswer3, 1,
                        new TestHint(userListApi, "", "A user with role ANONYMOUS" +
                                " must not have access to " + userListApi)), // 55

                () -> testListUser(johndoe3, 403,  listAnswer3, 1,
                        new TestHint(userListApi, "", "A user with role MERCHANT" +
                                " must not have access to " + userListApi)), // 56

                () -> testGetIP(administrator, 403, ipAnswerEmpty,
                        new TestHint(ipApi, "", "A user with role ADMINISTRATOR" +
                                " must not have access to GET " + ipApi)), // 57

                () -> testGetIP(johndoe3, 403, ipAnswerEmpty,
                        new TestHint(ipApi, "", "A user with role MERCHANT" +
                                " must not have access to GET " + ipApi)), // 58

                () -> testAddIP(administrator, 403, "192.168.1.66",
                        new TestHint(ipApi, "", "A user with role ADMINISTRATOR" +
                                " must not have access to POST " + ipApi)), // 59

                () -> testAddIP(johndoe3, 403, "192.168.1.66",
                        new TestHint(ipApi, "", "A user with role MERCHANT" +
                                " must not have access to POST " + ipApi)), // 60

                () -> testDeleteIP(administrator, 403, "192.168.1.66",
                        new TestHint(ipApi, "", "A user with role ADMINISTRATOR" +
                                " must not have access to DELETE " + ipApi)), // 61

                () -> testDeleteIP(johndoe3, 403, "192.168.1.66",
                        new TestHint(ipApi, "", "A user with role MERCHANT" +
                                " must not have access to DELETE " + ipApi)), // 62

                () -> testGetCard(administrator, 403, cardAnswerEmpty,
                        new TestHint(cardApi, "", "A user with role ADMINISTRATOR" +
                                " must not have access to GET " + cardApi)), // 63

                () -> testGetCard(johndoe3, 403, cardAnswerEmpty,
                        new TestHint(cardApi, "", "A user with role MERCHANT" +
                                " must not have access to GET " + cardApi)), // 64

                () -> testAddCard(administrator, 403, "4000003305061034",
                        new TestHint(cardApi, "", "A user with role ADMINISTRATOR" +
                                " must not have access to POST " + cardApi)), // 65

                () -> testAddCard(johndoe3, 403, "4000003305061034",
                        new TestHint(cardApi, "", "A user with role MERCHANT" +
                                " must not have access to POST " + cardApi)), // 66

                () -> testDeleteIP(administrator, 403, "4000003305061034",
                        new TestHint(cardApi, "", "A user with role ADMINISTRATOR" +
                                " must not have access to DELETE " + cardApi)), // 67

                () -> testDeleteIP(johndoe3, 403, "4000003305061034",
                        new TestHint(cardApi, "", "A user with role MERCHANT" +
                                " must not have access to DELETE " + cardApi)), // 68


                // Test ip black list
                () -> testGetIP(johndoe2, 200, ipAnswerEmpty,
                        new TestHint(ipApi, "", "Endpoint must respond with empty array")), // 69

                () -> testAddIP(johndoe2, 200, "192.168.1.66",
                        new TestHint(ipApi, "", "IP must be added to Black List")), // 70

                () -> testAddIP(johndoe2, 409, "192.168.1.66",
                        new TestHint(ipApi, "", "If IP already in database, " +
                                " endpoint must respond with the HTTP Conflict status (409).")), // 71

                () -> testAddIP(johndoe2, 400, "192.168.351.66",
                        new TestHint(ipApi, "", "If IP doesn't have right format," +
                                " respond with HTTP Bad Request status (400)")), // 72

                () -> testAddIP(johndoe2, 400, "192.168.1.",
                        new TestHint(ipApi, "", "If IP doesn't have right format," +
                                " respond with HTTP Bad Request status (400)")), // 73

                () -> testAddIP(johndoe2, 200, "192.168.1.67",
                        new TestHint(ipApi, "", "IP must be added to Black List")), // 74

                () -> testGetIP(johndoe2, 200, ipAnswer,
                        new TestHint(ipApi, "", "Endpoint must responds with Black List")), // 75

                () -> testDeleteIP(johndoe2, 200, "192.168.1.66",
                        new TestHint(ipApi, "", "IP must be removed from Black List")), // 76

                () -> testDeleteIP(johndoe2, 404, "192.168.1.66",
                        new TestHint(ipApi, "", "If IP not found in database, " +
                                "respond with the HTTP Not Found status (404).")), // 77

                () -> testDeleteIP(johndoe2, 400, "192.168.1.",
                        new TestHint(ipApi, "", "If IP doesn't have right format," +
                                " respond with HTTP Bad Request status (400)")), // 78

                () -> testGetIP(johndoe2, 200, ipAnswer2,
                        new TestHint(ipApi, "", "IP must be removed from Black List")), // 79


                // Test card number black list
                () -> testGetCard(johndoe2, 200, cardAnswerEmpty,
                        new TestHint(cardApi, "", "Endpoint must respond with empty array")), // 80

                () -> testAddCard(johndoe2, 200, "4000003305061034",
                        new TestHint(cardApi, "", "A card must be added to Black List")), // 81

                () -> testAddCard(johndoe2, 409, "4000003305061034",
                        new TestHint(cardApi, "", "If card-number already in database, " +
                                "endpoint must respond with the HTTP Conflict status (409).")), // 82

                () -> testAddCard(johndoe2, 400, "400000330506103",
                        new TestHint(cardApi, "", "If card-number doesn't have right format, " +
                                "endpoint must respond with HTTP Bad Request status (400).")), // 83

                () -> testAddCard(johndoe2, 400, "4000003305061033",
                        new TestHint(cardApi, "", "If checksum of card-number is wrong, " +
                                "endpoint must respond with HTTP Bad Request status (400).")), // 84

                () -> testAddCard(johndoe2, 200, "4000003305160034",
                        new TestHint(cardApi, "", "A card must be added to Black List")), // 85

                () -> testGetCard(johndoe2, 200, cardAnswer,
                        new TestHint(cardApi, "", "Endpoint must responds with Black List")), // 86

                () -> testDeleteCard(johndoe2, 200, "4000003305061034",
                        new TestHint(cardApi, "", "Card must be removed from Black List")), // 87

                () -> testDeleteCard(johndoe2, 404, "4000003305061034",
                        new TestHint(cardApi, "", "If card-number not found in database," +
                                " respond with the HTTP Not Found status (404).")), // 88

                () -> testDeleteCard(johndoe2, 400, "400000330506103",
                        new TestHint(cardApi, "", "If card-number doesn't have right format, " +
                                "endpoint must respond with HTTP Bad Request status (400).")), // 89

                () -> testGetCard(johndoe2, 200, cardAnswer2,
                        new TestHint(cardApi, "", "Card must be removed from Black List")), // 90

                // Test new validating
                () -> testTransaction(johndoe3, transactionApi, "POST", 200, trP1,
                        "PROHIBITED",  "ip",
                        new TestHint(transactionApi, "", "Transaction must be PROHIBITED" +
                                " due to - suspicious ip reason")), // 91

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, trP2,
                        "PROHIBITED",  "card-number",
                        new TestHint(transactionApi, "", "Transaction must be PROHIBITED" +
                                " due to - stolen card reason")), // 92

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, trP3,
                        "PROHIBITED",  "card-number, ip",
                        new TestHint(transactionApi, "", "Transaction must be PROHIBITED" +
                                " due to - stolen card, suspicious ip reasons")), // 93

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, trP4,
                        "PROHIBITED",  "amount, card-number, ip",
                        new TestHint(transactionApi, "", "Transaction must be PROHIBITED" +
                                " due to - amount, stolen card, suspicious ip reasons")), // 94

                // Test correlation rules
                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr1IP,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "Transaction must be ALLOWED")), // 95

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr2IP,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "Transaction must be ALLOWED")), // 96

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr22IP,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "Transaction must be ALLOWED")), // 97

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr3IP,
                        "MANUAL_PROCESSING",  "ip-correlation",
                        new TestHint(transactionApi, "", "Transaction must be MANUAL_PROCESSING" +
                                " due to - ip correlation rule")), // 98

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr4IP,
                        "PROHIBITED",  "ip-correlation",
                        new TestHint(transactionApi, "", "Transaction must be PROHIBITED" +
                                " due to - ip correlation rule")), // 99 Thnx to E. Kovko

                () -> testAddCard(johndoe2, 200, "4000008449433403",
                        new TestHint(cardApi, "", "A card must be added to Black List")), // 100

                () -> testAddIP(johndoe2, 200, "192.168.1.5",
                        new TestHint(ipApi, "", "IP must be added to Black List")), // 101

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr5IP,
                        "PROHIBITED",  "amount, card-number, ip, ip-correlation",
                        new TestHint(transactionApi, "", "Transaction must be PROHIBITED" +
                                " due to - amount, card-number, ip, ip-correlation reasons")), // 102
                //
                () -> testDeleteCard(johndoe2, 200, "4000008449433403",
                        new TestHint(cardApi, "", "Card must be removed from Black List")), // 103

                () -> testDeleteIP(johndoe2, 200, "192.168.1.5",
                        new TestHint(ipApi, "", "IP must be removed from Black List")), // 104


                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr1Reg,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "Transaction must be ALLOWED")), // 105

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr2Reg,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "Transaction must be ALLOWED")), // 106

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr22Reg,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "Transaction must be ALLOWED")), // 107

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr3Reg,
                        "MANUAL_PROCESSING",  "region-correlation",
                        new TestHint(transactionApi, "", "Transaction must be MANUAL_PROCESSING" +
                                " due to - region correlation rule")), // 108

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr4Reg,
                        "PROHIBITED",  "region-correlation",
                        new TestHint(transactionApi, "", "Transaction must be PROHIBITED" +
                                " due to - region correlation rule")), // 109

                () -> testAddCard(johndoe2, 200, "4000008449433403",
                        new TestHint(cardApi, "", "A card must be added to Black List")), // 110

                () -> testAddIP(johndoe2, 200, "192.168.1.2",
                        new TestHint(ipApi, "", "IP must be added to Black List")), // 111

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr5Reg,
                        "PROHIBITED",  "amount, card-number, ip, region-correlation",
                        new TestHint(transactionApi, "", "Transaction must be PROHIBITED" +
                                " due to - amount, card-number, ip, region-correlation reasons")), // 112

                () -> testDeleteCard(johndoe2, 200, "4000008449433403",
                        new TestHint(cardApi, "", "Card must be removed from Black List")), // 113

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr3IP,
                        "MANUAL_PROCESSING",  "ip-correlation",
                        new TestHint(transactionApi, "", "Transaction must be MANUAL_PROCESSING" +
                                " due to - ip correlation rule")), // 114

        };
    }
  learner_created: false
- name: src/antifraud/controller/UserController.java
  visible: true
  text: |
    package antifraud.controller;

    import antifraud.dto.request.RoleRequest;
    import antifraud.dto.request.UserRegistrationRequest;
    import antifraud.dto.response.DeleteResponseDTO;
    import antifraud.dto.response.UserDTO;
    import antifraud.entity.User;
    import antifraud.persistence.UserRepository;
    import antifraud.dto.request.ChangeUserStatusRequest;
    import antifraud.dto.response.ChangeUserStatusResponse;
    import antifraud.service.UserService;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.*;

    import java.util.List;
    import java.util.stream.Collectors;

    @RestController
    @RequestMapping("/api/auth")
    public class UserController {

        private final UserService userService;
        private final UserRepository userRepository;


        @Autowired
        public UserController(UserService userService, UserRepository userRepository) {
            this.userService = userService;
            this.userRepository = userRepository;

        }

        @PostMapping("/user")
        public ResponseEntity<?> registerUser( @RequestBody UserRegistrationRequest registrationRequest) {
                if (registrationRequest.getName() == null ||
                        registrationRequest.getUsername() == null ||
                        registrationRequest.getPassword() == null) {
                    return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();
                }

                UserDTO userDTO = userService.registerUser(registrationRequest);

                if (userDTO == null) {
                    return ResponseEntity.status(HttpStatus.CONFLICT).build(); // Handle validation or conflict cases
                }

                return ResponseEntity.status(HttpStatus.CREATED).body(userDTO);
            }


        @GetMapping("/list")
        public ResponseEntity<List<UserDTO>> getUsersList() {
            List<UserDTO> userDTOs = userService.getAllUsers().stream()
                    .map(user -> new UserDTO(user.getId(), user.getName(), user.getUsername(), user.getRole().name()))
                    .collect(Collectors.toList());
            return ResponseEntity.ok(userDTOs);
        }

        @DeleteMapping("/user/{username}")
        public ResponseEntity<DeleteResponseDTO> deleteUser(@PathVariable String username) {
            User deletedUser = userService.deleteUserByUsername(username);

            if (deletedUser != null) {
                DeleteResponseDTO responseDTO = new DeleteResponseDTO(username, "Deleted successfully!");
                return ResponseEntity.ok(responseDTO);
            } else {
                return ResponseEntity.status(HttpStatus.NOT_FOUND)
                        .body(new DeleteResponseDTO(username, "User not found"));
            }
        }

        @PutMapping("/role")
        public ResponseEntity<UserDTO> updateRole(@RequestBody RoleRequest roleRequest) {
            try {
                UserDTO userDTO = userService.updateRole(roleRequest);

                return ResponseEntity.status(HttpStatus.OK).body(userDTO);

            } catch (UnsupportedOperationException e) {
                return ResponseEntity.status(HttpStatus.CONFLICT).build(); // Role already assigned

            } catch (IllegalArgumentException e){
                String errorMessage = e.getMessage();
                if ("User not found".equals(errorMessage)) {
                    return ResponseEntity.status(HttpStatus.NOT_FOUND).build(); // User not found
                } else if ("Invalid role".equals(errorMessage)) {
                    return ResponseEntity.status(HttpStatus.BAD_REQUEST).build(); // Invalid role
                }
                return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build(); // Default error response
            }
        }

        @PutMapping("/access")
        public ResponseEntity<?> changeStatus(@RequestBody ChangeUserStatusRequest changeUserStatusRequest) {

            try {
                ChangeUserStatusResponse statusDTO = userService.changeStatus(changeUserStatusRequest);

                return ResponseEntity.status(HttpStatus.OK).body(statusDTO);

            } catch (UnsupportedOperationException e) {
                String errorMessage = e.getMessage();
                if ("User not found".equals(errorMessage)) {
                    return ResponseEntity.status(HttpStatus.NOT_FOUND).build(); // User not found
                } else if ("CAN NOT LOCK ADMIN".equals(errorMessage)) {
                    return ResponseEntity.status(HttpStatus.BAD_REQUEST).build(); // Invalid role
                }
                return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build(); // Default error response

            }
        }


    }
  learner_created: true
- name: src/antifraud/persistence/CardRepository.java
  visible: true
  text: |
    package antifraud.persistence;

    import antifraud.entity.Card;
    import jakarta.persistence.Entity;
    import org.springframework.data.repository.CrudRepository;
    import org.springframework.stereotype.Repository;

    import java.util.Optional;

    @Repository
    public interface CardRepository extends CrudRepository<Card, Long> {
        Optional<Card> findByNumber(String number);

        boolean existsByNumber(String number);
    }
  learner_created: true
- name: src/antifraud/dto/response/ChangeUserStatusResponse.java
  visible: true
  text: |-
    package antifraud.dto.response;

    public class ChangeUserStatusResponse {

        public String status;

        public ChangeUserStatusResponse(String username, Boolean locked) {
            String status = locked ? "locked!" : "unlocked!";
            this.status = "User " + username + " " + status;
        }


    }
  learner_created: true
- name: src/antifraud/dto/response/AddressResponse.java
  visible: true
  text: |
    package antifraud.dto.response;

    public class AddressResponse {
        private Long id;
        private String ip;


        public AddressResponse(Long id, String ip) {
            this.id = id;
            this.ip = ip;
        }

        public Long getId() {
            return id;
        }

        public String getIp() {
            return ip;
        }

    }
  learner_created: true
- name: src/antifraud/security/RestAuthenticationEntryPoint.java
  visible: true
  text: |
    package antifraud.security;

    import jakarta.servlet.ServletException;
    import jakarta.servlet.http.HttpServletRequest;
    import jakarta.servlet.http.HttpServletResponse;
    import org.springframework.security.core.AuthenticationException;
    import org.springframework.security.web.AuthenticationEntryPoint;

    import java.io.IOException;

    import org.springframework.stereotype.Component;

    @Component
    public class RestAuthenticationEntryPoint implements AuthenticationEntryPoint {

        @Override
        public void commence(HttpServletRequest request,
                             HttpServletResponse response,
                             AuthenticationException authException) throws IOException, ServletException {
            response.sendError(HttpServletResponse.SC_UNAUTHORIZED, authException.getMessage());
        }
    }
  learner_created: true
- name: src/antifraud/dto/response/DeleteResponseDTO.java
  visible: true
  text: |
    package antifraud.dto.response;

    public class DeleteResponseDTO {
        private String username;
        private String status;

        public DeleteResponseDTO(String username, String status) {
            this.username = username;
            this.status = status;
        }

        public String getUsername() {
            return username;
        }

        public String getStatus() {
            return "Deleted successfully!";
        }
    }
  learner_created: true
- name: src/antifraud/dto/response/UserDTO.java
  visible: true
  text: "package antifraud.dto.response;\n\nimport antifraud.service.UserService;\n\
    \npublic class UserDTO {\n    private Long id;\n    private String name;\n   \
    \ private String username;\n    private String role;\n    \n    public UserDTO(){}\n\
    \n    public UserDTO(Long id, String name, String username, String role) {\n \
    \       this.id = id;\n        this.name = name;\n        this.username = username;\n\
    \        this.role = role;\n    }\n\n\n    // Getters, setters...\n    public\
    \ Long getId(){\n        return id;\n    }\n    \n    public String getName(){\n\
    \        return name;\n    }\n    \n    public String getUsername(){\n       \
    \ return username;\n    }\n\n    public String getRole() {\n        return role;\n\
    \    }\n\n    public void setRole(String role){\n        this.role = role;\n \
    \   }\n}"
  learner_created: true
- name: src/antifraud/entity/UserDetailsImpl.java
  visible: true
  text: |
    package antifraud.entity;

    import antifraud.service.UserService;
    import org.springframework.security.core.GrantedAuthority;
    import org.springframework.security.core.authority.SimpleGrantedAuthority;
    import org.springframework.security.core.userdetails.UserDetails;

    import java.util.Collection;
    import java.util.List;

    public class UserDetailsImpl implements UserDetails {

        private final User user;

        public UserDetailsImpl(User user) {
            this.user = user;
        }

        @Override
        public Collection<? extends GrantedAuthority> getAuthorities() {
            // Return a collection of user's authorities (roles, permissions) here
            // For example: user.getRoles()
            // This is where you map your User's roles/permissions to Spring Security's GrantedAuthorities
            return List.of(new SimpleGrantedAuthority("ROLE_" + user.getRole().name()));
        }

        @Override
        public String getPassword() {
            return user.getPassword();
        }

        @Override
        public String getUsername() {
            return user.getUsername();
        }

        @Override
        public boolean isAccountNonExpired() {
            return true;
        }

        @Override
        public boolean isAccountNonLocked() {
            return !user.getLocked();
        }

        @Override
        public boolean isCredentialsNonExpired() {
            return true;
        }

        @Override
        public boolean isEnabled() {
            return true;
        }
    }
  learner_created: true
- name: src/antifraud/dto/request/AddressRequest.java
  visible: true
  text: |
    package antifraud.dto.request;

    public class AddressRequest {

        private String ip;

        public String getIp() {
            return ip;
        }
    }
  learner_created: true
- name: src/antifraud/entity/Address.java
  visible: true
  text: |
    package antifraud.entity;

    import jakarta.persistence.Entity;
    import jakarta.persistence.GeneratedValue;
    import jakarta.persistence.GenerationType;
    import jakarta.persistence.Id;

    @Entity
    public class Address {
        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private Long id;

        private String ip;

        public Address(){}

        public Address(String ip) {
            this.ip = ip;
        }

        public Long getId() {
            return id;
        }

        public String getIp(){
            return ip;
        }
    }
  learner_created: true
- name: src/antifraud/dto/request/AccessRequest.java
  visible: true
  text: |
    package antifraud.dto.request;

    public class AccessRequest {
        private String username;
        private String operation;

        // Getters and setters
        public String getUsername(){
            return username;
        }

        public String getOperation(){
            return operation;
        }
    }
  learner_created: true
- name: src/antifraud/persistence/UserRepository.java
  visible: true
  text: |
    package antifraud.persistence;

    import org.springframework.data.jpa.repository.Query;
    import org.springframework.data.repository.CrudRepository;
    import antifraud.entity.User;
    import org.springframework.stereotype.Repository;

    import java.util.Optional;

    @Repository
    public interface UserRepository extends CrudRepository<User, Long> {
        Optional<User> findByUsername(String username);


        boolean existsByUsername(String username);
    }
  learner_created: true
- name: src/antifraud/service/UserDetailsServiceImpl.java
  visible: true
  text: |
    package antifraud.service;

    import antifraud.entity.User;
    import antifraud.persistence.UserRepository;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.security.core.authority.SimpleGrantedAuthority;
    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.security.core.userdetails.UserDetailsService;
    import org.springframework.security.core.userdetails.UsernameNotFoundException;
    import org.springframework.stereotype.Service;
    import antifraud.entity.UserDetailsImpl;

    import java.util.ArrayList;
    import java.util.Optional;

    @Service
    public class UserDetailsServiceImpl implements UserDetailsService {

        private final UserRepository userRepository;

        @Autowired
        public UserDetailsServiceImpl(UserRepository userRepository) {
            this.userRepository = userRepository;
        }

        @Override
        public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
            User user = userRepository.findByUsername(username)
                    .orElseThrow(() -> new UsernameNotFoundException("User not found "));

            return new UserDetailsImpl(user);
        }
    }
  learner_created: true
- name: src/antifraud/controller/AddressController.java
  visible: true
  text: |
    package antifraud.controller;

    import antifraud.dto.request.AddressRequest;
    import antifraud.dto.response.AddressResponse;
    import antifraud.dto.response.DeleteAddressResponse;
    import antifraud.dto.response.DeleteCardResponse;
    import antifraud.dto.response.UserDTO;
    import antifraud.entity.Address;
    import antifraud.service.AddressService;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.validation.annotation.Validated;
    import org.springframework.web.bind.annotation.*;

    import java.util.List;

    @RestController
    @RequestMapping("/api/antifraud")
    public class AddressController {
        private AddressService addressService;

        @Autowired
        public AddressController(AddressService addressService){
            this.addressService = addressService;
        }

        @PostMapping("/suspicious-ip")
        public ResponseEntity<?> saveSuspiciousIpAddress(@Validated @RequestBody AddressRequest addressRequest) {

            try {
                AddressResponse addressResponse =  addressService.saveSuspiciousIp(addressRequest);

                return ResponseEntity.status(HttpStatus.OK).body(addressResponse);

            } catch (UnsupportedOperationException e) {
                if (("Ip already exists").equals(e.getMessage())) {
                    return ResponseEntity.status(HttpStatus.CONFLICT).build(); // Ip already assigned
                } else if (("Wrong format").equals(e.getMessage())) {
                    return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();
                }
                return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build(); // Default error response
            }
        }

        @DeleteMapping("/suspicious-ip/{ip}")
        public ResponseEntity<?> deleteSuspiciousIp(@PathVariable String ip) {
            try {
                String ipAddressRegex = "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$";
                if (!ip.matches(ipAddressRegex)) {
                    return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();
                }
                DeleteAddressResponse deleteAddressResponse = addressService.deleteSuspiciousIp(ip);
                return ResponseEntity.status(HttpStatus.OK).body(deleteAddressResponse);
            } catch (UnsupportedOperationException e){
                return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
            }
        }

        @GetMapping("/suspicious-ip")
        public List<Address> listIpAddresses() {
            return addressService.getAllAddress();
        }
    }
  learner_created: true
- name: src/antifraud/dto/request/TransactionRequest.java
  visible: true
  text: |
    package antifraud.dto.request;

    import com.fasterxml.jackson.annotation.JsonProperty;

    public class TransactionRequest {
        @JsonProperty("amount")
        private Long amount;
        private String ip;
        private String number;

        // Getter and Setter methods

        public Long getAmount() {
            return amount;
        }

        public String getNumber() {
            return number;
        }

        public String getIp() {
            return ip;
        }
    }
  learner_created: true
- name: src/antifraud/service/UserService.java
  visible: true
  text: |
    package antifraud.service;

    import antifraud.dto.request.ChangeUserStatusRequest;
    import antifraud.dto.request.RoleRequest;
    import antifraud.dto.request.UserRegistrationRequest;
    import antifraud.dto.response.ChangeUserStatusResponse;
    import antifraud.dto.response.UserDTO;
    import antifraud.entity.User;
    import antifraud.persistence.UserRepository;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.security.crypto.password.PasswordEncoder;
    import org.springframework.stereotype.Service;

    import java.util.List;

    @Service
    public class UserService {

        private final UserRepository userRepository;

        private final PasswordEncoder passwordEncoder;

        public enum UserRole {
            ANONYMOUS,
            MERCHANT,
            ADMINISTRATOR,
            SUPPORT
        }

        public enum Status {
            LOCK,
            UNLOCK
        }

        @Autowired
        public UserService(UserRepository userRepository, PasswordEncoder passwordEncoder) {
            this.userRepository = userRepository;
            this.passwordEncoder = passwordEncoder;
        }

        public List<User> getAllUsers() {
            return (List<User>) userRepository.findAll();
        }

        public User deleteUserByUsername(String username) {
            User userToDelete = userRepository.findByUsername(username).orElse(null);

            if (userToDelete != null) {
                userRepository.delete(userToDelete);
            }

            return userToDelete;
        }

        public UserDTO registerUser(UserRegistrationRequest registrationRequest) {

            if (userRepository.existsByUsername(registrationRequest.getUsername())) {
                return null; // Handle conflict case
            }

            String encodedPassword = passwordEncoder.encode(registrationRequest.getPassword());


            User user = new User(registrationRequest.getName(), registrationRequest.getUsername(), encodedPassword);

            if (userRepository.count() == 0) {
                user.setRole(UserRole.ADMINISTRATOR);
            }
            user.setLocked(user.getRole() != UserRole.ADMINISTRATOR);

            userRepository.save(user);

            return new UserDTO(user.getId(), user.getName(), user.getUsername(), user.getRole().name());
        }


        public UserDTO updateRole(RoleRequest roleRequest) {
            User userToChangeRole = userRepository.findByUsername(roleRequest.getUsername()).orElse(null);

            if (userToChangeRole == null) {
                throw new IllegalArgumentException("User not found");
            }

            if (userToChangeRole.getRole().name().equals(roleRequest.getRole())) {
                throw new UnsupportedOperationException("Role already assigned"); // Role already provided to the user
            }

            if (!( "MERCHANT".equals(roleRequest.getRole()) || "SUPPORT".equals(roleRequest.getRole()) )) {
                throw new IllegalArgumentException("Invalid role");
            }
            userToChangeRole.setRole(UserRole.valueOf(roleRequest.getRole()));
            userRepository.save(userToChangeRole);

            return new UserDTO(userToChangeRole.getId(), userToChangeRole.getName(), userToChangeRole.getUsername(), userToChangeRole.getRole().name());
        }

        public ChangeUserStatusResponse changeStatus(ChangeUserStatusRequest changeUserStatusRequest) {
            User user = userRepository.findByUsername(changeUserStatusRequest.getUsername()).orElse(null);

            if (user == null) {
                throw new UnsupportedOperationException("USER NOT FOUND");
            }

            if (user.getRole() == UserRole.ADMINISTRATOR) {
                throw new UnsupportedOperationException("CAN NOT LOCK ADMIN");
            }


            Status userStatus = Status.valueOf(changeUserStatusRequest.getOperation().toUpperCase());
            user.setLocked(userStatus == Status.LOCK);

            userRepository.save(user);
            return new ChangeUserStatusResponse(user.getUsername(), user.getLocked());
        }


    }
  learner_created: true
- name: src/antifraud/controller/CardController.java
  visible: true
  text: |
    package antifraud.controller;

    import antifraud.dto.request.CardRequest;
    import antifraud.dto.response.CardResponse;
    import antifraud.dto.response.DeleteCardResponse;
    import antifraud.entity.Card;
    import antifraud.service.CardService;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.validation.annotation.Validated;
    import org.springframework.web.bind.annotation.*;

    import java.util.List;

    @RestController
    @RequestMapping("/api/antifraud")
    public class CardController {
        private CardService cardService;

        @Autowired
        public CardController(CardService cardService) {
            this.cardService = cardService;
        }

        @PostMapping("/stolencard")
        public ResponseEntity<?> saveStolenCard(@Validated @RequestBody CardRequest cardRequest){

            try {
                CardResponse cardResponse =  cardService.saveCard(cardRequest);

                return ResponseEntity.status(HttpStatus.OK).body(cardResponse);

            } catch (UnsupportedOperationException e) {
                if (("Card number already exists").equals(e.getMessage())) {
                    return ResponseEntity.status(HttpStatus.CONFLICT).build(); // Ip already assigned
                } else if (("Wrong format").equals(e.getMessage())) {
                    return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();
                }
                return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build(); // Default error response
            }
        }

        @DeleteMapping("/stolencard/{number}")
        public ResponseEntity<?> deleteCard(@PathVariable String number){
            try {

                if (!CardService.isValidCardNumber(number)) {
                    return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();
                }
                DeleteCardResponse deleteCardResponse = cardService.deleteCard(number);
                return ResponseEntity.status(HttpStatus.OK).body(deleteCardResponse);
            } catch (UnsupportedOperationException e){
                return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
            }
        }

        @GetMapping("/stolencard")
        public List<Card> listCards() {
            return cardService.getAllCard();
        }
    }
  learner_created: true
- name: src/antifraud/dto/request/UserRegistrationRequest.java
  visible: true
  text: |-
    package antifraud.dto.request;

    public class UserRegistrationRequest {
        private String name;
        private String username;
        private String password;

        // Constructors, getters, setters...
        public UserRegistrationRequest(){}

        public UserRegistrationRequest(String name, String username, String password) {
            this.name = name;
            this.username = username;
            this.password = password;
        }

        public String getName() {
            return name;
        }

        public String getUsername(){
            return username;
        }

        public String getPassword(){
            return password;
        }
    }
  learner_created: true
- name: src/antifraud/controller/TransactionController.java
  visible: true
  text: |
    package antifraud.controller;

    import antifraud.dto.request.TransactionRequest;
    import antifraud.dto.response.TransactionResponseDTO;
    import antifraud.service.TransactionService;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.validation.annotation.Validated;
    import org.springframework.web.bind.annotation.PostMapping;
    import org.springframework.web.bind.annotation.RequestBody;
    import org.springframework.web.bind.annotation.RequestMapping;
    import org.springframework.web.bind.annotation.RestController;

    import java.util.ArrayList;
    import java.util.List;

    @RestController
    @RequestMapping("/api/antifraud/transaction")
    @Validated
    public class TransactionController {
        private final TransactionService transactionService;

        @Autowired
        public TransactionController(TransactionService transactionService) {
            this.transactionService = transactionService;
        }

        @PostMapping
        public ResponseEntity<TransactionResponseDTO> postTransaction(@RequestBody TransactionRequest request) {
            Long amount = request.getAmount();
            TransactionResponseDTO responseDTO = new TransactionResponseDTO();

            if (amount == null || amount <= 0) {
                return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();
            }

            // Check IP and Card number against blacklist
            boolean isIpBlacklisted = transactionService.isBlacklistedIp(request.getIp());
            boolean isCardNumberBlacklisted = transactionService.isBlacklistedCard(request.getNumber());

            List<String> infoList = new ArrayList<>();


            if (amount <= 200) {
                responseDTO.setResult("ALLOWED");
            } else if (amount <= 1500) {
                responseDTO.setResult("MANUAL_PROCESSING");

                if (!(isIpBlacklisted || isCardNumberBlacklisted)) {
                    infoList.add("amount");
                }

            } else {
                responseDTO.setResult("PROHIBITED");
                infoList.add("amount");
            }

            if (isIpBlacklisted && isCardNumberBlacklisted) {
                responseDTO.setResult("PROHIBITED");
                infoList.add("card-number");
                infoList.add("ip");
            } else if (isIpBlacklisted) {
                responseDTO.setResult("PROHIBITED");
                infoList.add("ip");
            } else if (isCardNumberBlacklisted) {
                responseDTO.setResult("PROHIBITED");
                infoList.add("card-number");
            }



            if (infoList.isEmpty()) {
                responseDTO.setInfo("none");
            } else {
                responseDTO.setInfo(String.join(", ", infoList));
            }

            return ResponseEntity.ok(responseDTO);
        }
    }
  learner_created: true
- name: src/antifraud/security/SecurityConfig.java
  visible: true
  text: |
    package antifraud.security;

    import antifraud.service.UserDetailsServiceImpl;
    import jakarta.servlet.http.HttpServletResponse;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.context.annotation.Bean;
    import org.springframework.context.annotation.Configuration;
    import org.springframework.http.HttpMethod;
    import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
    import org.springframework.security.config.annotation.web.builders.HttpSecurity;
    import org.springframework.security.config.http.SessionCreationPolicy;
    import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
    import org.springframework.security.crypto.password.PasswordEncoder;
    import org.springframework.security.web.SecurityFilterChain;

    @Configuration
    public class SecurityConfig {
        private final UserDetailsServiceImpl userDetailsService;
        private final RestAuthenticationEntryPoint restAuthenticationEntryPoint;
        @Autowired
        private CustomAccessDeniedHandler accessDeniedHandler;

        protected void configure(AuthenticationManagerBuilder auth) throws Exception {
            auth
                    .userDetailsService(userDetailsService) // user store
                    .passwordEncoder(getEncoder());
        }

        @Autowired
        public SecurityConfig(UserDetailsServiceImpl userDetailsService, RestAuthenticationEntryPoint restAuthenticationEntryPoint) {
            this.userDetailsService = userDetailsService;
            this.restAuthenticationEntryPoint = restAuthenticationEntryPoint;
        }


        @Bean
        public SecurityFilterChain defaultSecurityFilterChain(HttpSecurity http) throws Exception {
            http.httpBasic()
                    .authenticationEntryPoint(restAuthenticationEntryPoint) // Handles auth error
                    .and()
                    .csrf().disable().headers().frameOptions().disable() // for Postman, the H2 console
                    .and()
                    .authorizeHttpRequests(matcherRegistry -> matcherRegistry                    // manage access
                                    .requestMatchers(HttpMethod.POST, "/api/auth/user").permitAll()
                                    .requestMatchers("/actuator/shutdown").permitAll()      // needs to run test
                                    .requestMatchers(HttpMethod.GET, "/api/auth/list").hasAnyRole("ADMINISTRATOR", "SUPPORT")
                                    .requestMatchers(HttpMethod.POST, "/api/antifraud/transaction").hasRole("MERCHANT")
                                    .requestMatchers(HttpMethod.PUT, "/api/auth/access").hasRole("ADMINISTRATOR")
                                    .requestMatchers(HttpMethod.PUT, "/api/auth/role").hasRole("ADMINISTRATOR")
                                    .requestMatchers(HttpMethod.DELETE, "/api/auth/user/**").hasRole("ADMINISTRATOR")
                                    .requestMatchers(HttpMethod.POST,"/api/antifraud/**").hasRole("SUPPORT")
                                    .requestMatchers(HttpMethod.DELETE,"/api/antifraud/suspicious-ip/**").hasRole("SUPPORT")
                                    .requestMatchers(HttpMethod.DELETE,"/api/antifraud/stolencard/**").hasRole("SUPPORT")
                                    .requestMatchers(HttpMethod.GET,"/api/antifraud/**").hasRole("SUPPORT")
                                    .anyRequest().denyAll()
                            // other matchers
                    )
                    .exceptionHandling(handling -> handling
                            .accessDeniedHandler(accessDeniedHandler) // Set the custom access denied handler
                            .authenticationEntryPoint(restAuthenticationEntryPoint) // Handles auth error, authenticate with wrong password
                    )
                    .headers(headers ->
                            headers.frameOptions().disable()
                    )
                    .sessionManagement(session ->
                            session.sessionCreationPolicy(SessionCreationPolicy.STATELESS)
                    );

            return http.build();
        }



        @Bean
        public PasswordEncoder getEncoder() {
            return new BCryptPasswordEncoder();
        }
    }
  learner_created: true
- name: src/antifraud/entity/Card.java
  visible: true
  text: |+
    package antifraud.entity;

    import jakarta.persistence.Entity;
    import jakarta.persistence.GeneratedValue;
    import jakarta.persistence.GenerationType;
    import jakarta.persistence.Id;

    @Entity
    public class Card {

        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private Long id;

        private String number;

        // Add a constructor that initializes the 'number' field
        public Card(String number) {
            this.number = number;
        }

        // Default constructor
        public Card() {
        }

        // Getter methods
        public Long getId() {
            return id;
        }

        public String getNumber() {
            return number;
        }
    }

  learner_created: true
- name: src/antifraud/persistence/AddressRepository.java
  visible: true
  text: |
    package antifraud.persistence;

    import antifraud.entity.Address;
    import org.springframework.data.repository.CrudRepository;
    import org.springframework.stereotype.Repository;

    import java.util.Optional;

    @Repository
    public interface AddressRepository extends CrudRepository<Address, Long> {
        Optional<Address> findByIp(String ip);

        boolean existsByIp(String ip);
    }
  learner_created: true
- name: src/antifraud/dto/response/CardResponse.java
  visible: true
  text: |
    package antifraud.dto.response;

    public class CardResponse {
        private Long id;
        private final String number;
        public CardResponse(Long id, String number) {
            this.id = id;
            this.number = number;
        }

        public Long getId(){ return id;}

        public String getNumber() { return number;}


    }
  learner_created: true
- name: src/antifraud/dto/response/DeleteAddressResponse.java
  visible: true
  text: |
    package antifraud.dto.response;

    public class DeleteAddressResponse {
        private final String status;
        public DeleteAddressResponse(String ipAddress) {
            this.status = String.format("IP %s successfully removed!", ipAddress);
        }

        public String getStatus(){
            return status;
        }
    }
  learner_created: true
- name: src/antifraud/entity/User.java
  visible: true
  text: |-
    package antifraud.entity;

    import antifraud.service.UserService;
    import jakarta.persistence.Entity;
    import jakarta.persistence.GeneratedValue;
    import jakarta.persistence.GenerationType;
    import jakarta.persistence.Id;
    import org.springframework.security.core.GrantedAuthority;
    import org.springframework.security.core.authority.SimpleGrantedAuthority;

    import java.util.ArrayList;
    import java.util.Collection;
    import java.util.List;

    @Entity
    public class User {
        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private Long id;
        private String username;
        private String password;
        private String name;
        private UserService.UserRole  role = UserService.UserRole.MERCHANT;

        private boolean locked = true;

        public User() {}



        public User(String name, String username, String encodedPassword) {
            this.name = name;
            this.username = username;
            this.password = encodedPassword;
        }


        public Long getId() {
            return id;
        }

        public void setId(Long id) {
            this.id = id;
        }

        public String getName() {
            return name;
        }

        public void setUsername(String username) {
            this.username = username;
        }

        public String getUsername() {
            return username;
        }

        public void setName(String name) {
            this.name = name;
        }

        public String getPassword() {
            return password;
        }

        public void setPassword(String password) {
            this.password = password;
        }

        public UserService.UserRole getRole() {
            return role;
        }

        public void setRole(UserService.UserRole role) {
            this.role = role;
        }

        public boolean getLocked() { return locked;}

        public void setLocked(boolean locked) {this.locked = locked;}

    }
  learner_created: true
- name: src/antifraud/service/CardService.java
  visible: true
  text: |
    package antifraud.service;


    import antifraud.dto.request.CardRequest;
    import antifraud.dto.response.CardResponse;
    import antifraud.dto.response.DeleteCardResponse;
    import antifraud.entity.Card;
    import antifraud.persistence.CardRepository;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.stereotype.Service;
    import org.springframework.web.server.ResponseStatusException;

    import java.util.List;

    @Service
    public class CardService {
        private final CardRepository cardRepository;

        @Autowired
        public CardService(CardRepository cardRepository) {
            this.cardRepository = cardRepository;
        }

        //save Card
        public CardResponse saveCard(CardRequest cardRequest) {
            if (cardRepository.existsByNumber(cardRequest.getNumber())) {
                throw new UnsupportedOperationException("Card number already exists");
            }

            if (!isValidCardNumber(cardRequest.getNumber())) {
                throw new UnsupportedOperationException("Wrong format");
            }
            Card card = new Card(cardRequest.getNumber());
            cardRepository.save(card);
            return new CardResponse(card.getId(), card.getNumber());
        }

        //delete card
        public DeleteCardResponse deleteCard(String number){
            Card card = cardRepository.findByNumber(number).orElse(null);

            if (card != null) {
                cardRepository.delete(card);
            } else {
                throw new UnsupportedOperationException("CARD NOT FOUND");
            }

            return new DeleteCardResponse(number);
        }

        // get all stolen cards
        public List<Card> getAllCard(){ return (List<Card>) cardRepository.findAll();}

        public static boolean isValidCardNumber(String cardNumber) {
            int nDigits = cardNumber.length();
            int nSum = 0;
            boolean isSecond = false;

            for (int i = nDigits - 1; i >= 0; i--) {
                int d = cardNumber.charAt(i) - '0';
                if (isSecond)
                    d = d * 2;

                // Add two digits to handle cases where doubling results in a two-digit number
                nSum += d / 10 + d % 10;
                isSecond = !isSecond;
            }

            return nSum % 10 == 0;
        }

    }
  learner_created: true
- name: src/antifraud/security/CustomAccessDeniedHandler.java
  visible: true
  text: |+
    package antifraud.security;

    import jakarta.servlet.ServletException;
    import jakarta.servlet.http.HttpServletRequest;
    import jakarta.servlet.http.HttpServletResponse;
    import org.springframework.security.access.AccessDeniedException;
    import org.springframework.security.web.access.AccessDeniedHandler;
    import org.springframework.stereotype.Component;

    import java.io.IOException;

    @Component
    public class CustomAccessDeniedHandler implements AccessDeniedHandler {

        @Override
        public void handle(HttpServletRequest request, HttpServletResponse response, AccessDeniedException accessDeniedException) throws IOException, ServletException {
            response.sendError(HttpServletResponse.SC_FORBIDDEN, accessDeniedException.getMessage());
        }
    }

  learner_created: true
- name: src/antifraud/dto/request/DeleteAddressRequest.java
  visible: true
  text: |
    package antifraud.dto.request;

    public class DeleteAddressRequest {
        private String ip;
        public String getIp() {
            return ip;
        }
    }
  learner_created: true
- name: src/antifraud/dto/response/TransactionResponseDTO.java
  visible: true
  text: |
    package antifraud.dto.response;

    import com.fasterxml.jackson.annotation.JsonProperty;

    import java.util.ArrayList;
    import java.util.Collections;
    import java.util.List;
    import java.util.stream.Collectors;

    public class TransactionResponseDTO {
        @JsonProperty("result")
        private String result;
        private String info;

        // Constructors, getters, setters
        public TransactionResponseDTO() {
        }

        public String getResult() {
            return this.result;
        }

        public void setResult(String result) {
            this.result = result;
        }

        public String getInfo() {
            return this.info;
        }


        public void setInfo(String info) {
            this.info = info;
        }
    }
  learner_created: true
- name: src/antifraud/dto/request/ChangeUserStatusRequest.java
  visible: true
  text: |-
    package antifraud.dto.request;

    public class ChangeUserStatusRequest {
        private String username;

        private String operation;

        public String getUsername() {
            return username;
        }

        public String getOperation() {
            return operation;
        }
    }
  learner_created: true
- name: src/antifraud/dto/request/RoleRequest.java
  visible: true
  text: |
    package antifraud.dto.request;

    import antifraud.service.UserService;

    public class RoleRequest {
        private String username;
        private String role;

        public String getUsername(){ return username;}

        public String getRole() {return role;}
    }
  learner_created: true
- name: src/antifraud/service/AddressService.java
  visible: true
  text: |
    package antifraud.service;

    import antifraud.dto.request.AddressRequest;
    import antifraud.dto.response.AddressResponse;
    import antifraud.dto.response.DeleteAddressResponse;
    import antifraud.entity.Address;
    import antifraud.persistence.AddressRepository;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.stereotype.Service;
    import org.springframework.web.server.ResponseStatusException;

    import java.util.List;

    @Service
    public class AddressService {
        private final AddressRepository addressRepository;

        @Autowired
        public AddressService(AddressRepository addressRepository) {
            this.addressRepository = addressRepository;
        }

        //saveSuspiciousIp
        public AddressResponse saveSuspiciousIp(AddressRequest addressRequest) {
            if (addressRepository.existsByIp(addressRequest.getIp())) {
                throw new UnsupportedOperationException("Ip already exists");
            }
            String ipAddressRegex = "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$";

            if (!addressRequest.getIp().matches(ipAddressRegex)) {
                throw new UnsupportedOperationException("Wrong format");
            }

            Address address = new Address(addressRequest.getIp());
            addressRepository.save(address);
            return new AddressResponse(address.getId(), address.getIp());
        }

        //deleteSuspiciousIp
        public DeleteAddressResponse deleteSuspiciousIp(String ipAddress){
            Address ip = addressRepository.findByIp(ipAddress).orElse(null);

            if (ip != null) {
                addressRepository.delete(ip);
            } else {
                throw new UnsupportedOperationException("ADDRESS NOT FOUND");
            }

            return new DeleteAddressResponse(ipAddress);
        }


        //getSuspiciousIps
        public List<Address> getAllAddress() {
            return (List<Address>) addressRepository.findAll();
        }

    }
  learner_created: true
- name: src/antifraud/service/TransactionService.java
  visible: true
  text: |
    package antifraud.service;

    import antifraud.persistence.AddressRepository;
    import antifraud.persistence.CardRepository;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.stereotype.Service;

    @Service
    public class TransactionService {

        private AddressRepository addressRepository;
        private CardRepository cardRepository;

        @Autowired
        public TransactionService(AddressRepository addressRepository, CardRepository cardRepository) {
            this.addressRepository = addressRepository;
            this.cardRepository = cardRepository;
        }

        public boolean isBlacklistedIp(String ip) {
            // Implement the logic to check if the IP address is blacklisted
            return addressRepository.existsByIp(ip);
        }

        public boolean isBlacklistedCard(String cardNumber) {
            // Implement the logic to check if the card number is blacklisted
            return cardRepository.existsByNumber(cardNumber);
        }
    }
  learner_created: true
- name: src/antifraud/dto/request/CardRequest.java
  visible: true
  text: |
    package antifraud.dto.request;

    public class CardRequest {
        private String number;

        public String getNumber() {return number;}
    }
  learner_created: true
- name: src/antifraud/dto/response/DeleteCardResponse.java
  visible: true
  text: |
    package antifraud.dto.response;

    public class DeleteCardResponse {
        private final String status;
        public DeleteCardResponse(String number) {
            this.status = String.format("Card %s successfully removed!", number);
        }

        public String getStatus(){ return status;}
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/18071#comment
status: Unchecked
record: -1
